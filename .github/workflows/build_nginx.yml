# nginx-quic编译安装

> 本地安装好与线上相同的系统，主要辨别方式为：`ldd --version`

- 以下列表可作为参考，但不包含所有子版本。比如：`Red Hat 9.V`的 `Idd`版本为 `2.34`

| 系统版本  | ldd版本 |
| --------- | ------- |
| Red Hat 6 | 2.12    |
| Red Hat 7 | 2.17    |
| Red Hat 8 | 2.28    |
| Red Hat 9 | 2.34    |
| Debian 9  | 2.24    |
| Debian 10 | 2.28    |
| Debian 11 | 2.30    |

## 本地系统环境准备

```sh
sudo dnf -y update
sudo dnf -y in docker 
docker pull almalinux:latest // 系统镜像可随意，要注意`ldd --version`显示的版本是否一致或低于
```

## 运行拉取的镜像

- docker run -it -v /home/nginx:/opt/nginx --rm `{IMAGE ID}`
  - 运行临时容器并挂载目录，目录中就是nginx相关的编译文件。第一次可为空，作为第二次使用的保留
  - 当然容器也可以保留，去除 `--rm`参数即可

## 容器系统环境补充

```sh
dnf -y update
dnf -y groupinstall "Development Tools"
dnf -y in nano wget mercurial psmisc cmake go automake gcc gcc-c++ kernel-devel git zlib zlib-devel openssl openssl-devel pcre pcre-devel perl-IPC-Cmd make tar autoconf brotli-devel pcre pcre-devel
dnf clean all
```

## 配置系统代理 `可选`

> docker代理

```sh
mkdir -p /etc/systemd/system/docker.service.d
nano /etc/systemd/system/docker.service.d/http-proxy.conf
// 贴入以下内容
[Service]
Environment="HTTP_PROXY=http://proxy_server:proxy_port"
Environment="HTTPS_PROXY=http://proxy_server:proxy_port"
// 之后需要重启下docker
systemctl daemon-reload
systemctl restart docker
```

> http代理`可以在容器内直接使用`

```sh
nano .bash_profile

// 粘贴以下内容，需要将代理地址的`127.0.0.1`改成对应代理服务器

# 关闭
function pf(){
    unset http_proxy
    unset https_proxy
    unset all_proxy
    echo -e "代理已关闭"
}

# 开启
function po() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    export http_proxy="http://proxy_server:proxy_port"
    export https_proxy="http://proxy_server:proxy_port"
    export all_proxy="socks5://proxy_server:proxy_port"
    echo -e "代理已开启"
}

// 重载配置
source .bash_profile
// 开启
po
// 测试；出现 -> `HTTP/1.1 200 Connection established`即为成功
curl -I https://www.google.com.hk/
```

## 添加[openssl](https://github.com/quictls/openssl/)支持 `加密库`

```sh
# 进入工作目录
cd /opt/nginx
# 拉取
git clone --depth 1 https://github.com/quictls/openssl.git && cd openssl
```

## 增加[jemalloc](https://github.com/jemalloc/jemalloc)支持 `内存分配器`

```sh
# 进入工作目录
cd /opt/nginx
# 拉取
git clone --depth 1 --recurse-submodules https://github.com/jemalloc/jemalloc.git && cd jemalloc
# 编译
./autogen.sh && make -j$(nproc) && make install && make clean
ln -s /usr/local/lib/libjemalloc.so.2 /usr/lib/libjemalloc.so.2
ln -s /usr/local/lib/libjemalloc.so.2 /usr/lib64/libjemalloc.so.2
```

## 添加[brotli](https://github.com/google/ngx_brotli)支持 `压缩库`

```sh
# 进入工作目录
cd /opt/nginx
# 拉取ngx_brotli
git clone --depth 1 --recurse-submodules https://github.com/google/ngx_brotli.git ngx_brotli
# 进入目录并配置
cd ngx_brotli && git submodule update --init
```

## 添加[zstd](https://github.com/facebook/zstd)支持 `压缩库`

```sh
## zstd
# 进入工作目录
cd /opt/nginx
# 拉取zstd
git clone --depth 1 --recurse-submodules https://github.com/facebook/zstd.git
# 进入目录并配置
cd zstd && make -j$(nproc)  && make install && make clean
## ngx_zstd
# 进入工作目录
cd /opt/nginx
# 拉取ngx_zstd
git clone --depth 1 --recurse-submodules https://github.com/tokers/zstd-nginx-module.git ngx_zstd
```

## 添加[pcre2](https://github.com/PCRE2Project/pcre2)支持 `正则表达式库`

```sh
# 进入工作目录
cd /opt/nginx
# 拉取zstd
git clone --depth 1 --recurse-submodules https://github.com/PCRE2Project/pcre2.git
# 进入目录并配置
cd pcre2 && ./autogen.sh  && ./configure && make -j$(nproc) && make install && make clean
```

## 拉取[nginx](https://nginx.org/download) `nginx 1.25版本后,quic分支已经合并进入主线`

- 编译选项描述

| 选项 | 描述 |
|------|------|
| `--prefix=/nginx` | 设置安装路径为 `/nginx` 目录。 |
| `--with-threads` | 启用多线程支持。 |
| `--with-file-aio` | 启用异步文件 I/O 支持。 |
| `--with-http_v2_module` | 启用 HTTP/2 模块支持。 |
| `--with-http_v3_module` | 启用 HTTP/3 模块支持。 |
| `--with-http_ssl_module` | 启用 SSL/TLS 支持。 |
| `--with-http_sub_module` | 启用子请求模块支持。 |
| `--with-http_slice_module` | 启用 HTTP slice 模块支持。 |
| `--with-http_realip_module` | 启用真实 IP 模块支持。 |
| `--with-http_degradation_module` | 启用降级模块支持。 |
| `--with-http_stub_status_module` | 启用 stub 状态模块支持。 |
| `--with-pcre-jit` | 启用 PCRE JIT 编译器支持。 |
| `--with-pcre=../pcre2` | 指定使用位于 `../pcre2` 目录的 PCRE 库。 |
| `--with-stream` | 启用 TCP/UDP 流模块支持。 |
| `--with-stream_ssl_module` | 启用 TCP/UDP 流 SSL 模块支持。 |
| `--with-stream_ssl_preread_module` | 启用 TCP/UDP 流 SSL 预读取模块支持。 |
| `--with-openssl=../openssl` | 指定使用位于 `../openssl` 目录的 OpenSSL 库。 |
| `--add-module=../ngx_zstd` | 添加第三方模块 ngx_zstd。 |
| `--add-module=../ngx_brotli` | 添加第三方模块 ngx_brotli。 |
| `--with-ld-opt='-ljemalloc -Wl,-z,relro,-z,now -flto'` | 设置链接器选项，包括使用 jemalloc 库，启用 RELRO、NOW 和 LTO 优化。 |
| `--with-openssl-opt='no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 enable-tls1_3 enable-quic'` | 设置 OpenSSL 编译选项，包括禁用弱 SSL 密码套件，启用 EC NIST P-64 曲线，TLS 1.3 和 QUIC 支持。 |
| `--with-cc-opt` | 设置编译器选项，包括优化级别为 `-O3`，针对 Haswell 架构进行优化，启用 AVX2 指令集，循环展开，预取数组，强堆栈保护，设置 `_FORTIFY_SOURCE` 为 2，使用位置无关代码（PIC），管道化编译，启用 LTO 优化。`-O3 -march=haswell -mtune=haswell -mavx2 -funroll-loops -fprefetch-loop-arrays -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -pipe -flto` |

<details>
  <summary>查看`--with-openssl-opt`选项</summary>

`-O3 -march=haswell -mtune=haswell -mavx2 -funroll-loops -fprefetch-loop-arrays -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -pipe -flto`

</details>

````sh
# 进入工作目录
cd /opt/nginx
# 下载
wget https://nginx.org/download/nginx-1.27.1.tar.gz
# 解压
tar -zxvf nginx-1.27.1.tar.gz && rm -rf nginx-1.27.0.tar.gz && cd nginx-1.27.1
# 配置编译 `--prefix为安装目录，需要对应修改下`
```sh
./configure \
   --prefix=/nginx \
   --with-threads  \
   --with-file-aio \
   --with-http_v2_module \
   --with-http_v3_module \
   --with-http_ssl_module \
   --with-http_sub_module \
   --with-http_slice_module \
   --with-http_realip_module \
   --with-http_degradation_module \
   --with-http_stub_status_module \
   --with-pcre-jit \
   --with-pcre=../pcre2 \
   --with-stream \
   --with-stream_ssl_module \
   --with-stream_ssl_preread_module \
   --with-openssl=../openssl \
   --add-module=../ngx_zstd  \
   --add-module=../ngx_brotli \
   --with-ld-opt='-ljemalloc -Wl,-z,relro,-z,now -flto' \
   --with-openssl-opt='no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 enable-tls1_3 enable-quic' \
   --with-cc-opt='-O3 -march=haswell -mtune=haswell -mavx2 -funroll-loops -fprefetch-loop-arrays -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -pipe -flto'
```
// $(nproc)会自动获取设备完整核心数
make -j$(nproc) && cd objs && ./nginx -V
编译后的文件：nginx/objs/nginx

nginx version: nginx/1.27.1
built by gcc 8.5.0 20210514 (Red Hat 8.5.0-22) (GCC) 
built with OpenSSL 3.1.7+quic 3 Sep 2024
TLS SNI support enabled
configure arguments: --prefix=/home/cloud/nginx --with-threads --with-file-aio --with-http_v2_module --with-http_v3_module --with-http_ssl_module --with-http_sub_module --with-http_slice_module --with-http_realip_module --with-http_degradation_module --with-http_stub_status_module --with-pcre-jit --with-pcre=../pcre2 --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-openssl=../openssl --add-module=../ngx_zstd --add-module=../ngx_brotli --with-ld-opt='-ljemalloc -Wl,-z,relro,-z,now -flto' --with-openssl-opt='no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 enable-tls1_3 enable-quic' --with-cc-opt='-O3 -march=haswell -mtune=haswell -mavx2 -funroll-loops -fprefetch-loop-arrays -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -pipe -flto'
````

## 复制编译后的 `nginx`文件至宿主机

- docker cp `{CONTAINER ID}`:/opt/nginx/nginx-1.27.1/objs/nginx /root/nginx `容器运行的时候已经挂载目录(/home/nginx)，这步可以忽略`
- ./nginx -V

## 复制编译后的nginx到生产环境上 `记得备份之前的nginx哦~`

- 添加执行权限 `chmod +x nginx`
- 平滑停止：
  - `ps aux | grep nginx`
  - `kill -s QUIT 1234` 注意：需选择 `master process`的进程id
    - 注意：生产环境上也需要安装 `jemalloc`，不然会出现 `./nginx: error while loading shared libraries: libjemalloc.so.2: cannot open shared object file: No such file or directory`。或者直接不使用 `jemalloc`即可
    - 需要`jemalloc`，可以将`jemalloc`编译后的文件(`jemalloc-5.3.0/lib/*`)复制到运行机器(`/usr/local/bin/`)，再进行软连接(`sudo ln -s /usr/local/lib/libjemalloc.so.2 /usr/lib/libjemalloc.so.2`)，之后重载连接库(`sudo ldconfig`)即可

## nginx相关配置

[前往](https://www.dbug.cloud/docs/nginx_config)

## 验证

[前往](https://http3check.net) or [前往](https://http3.wcode.net)
![QQ截图20240709131321.png](https://system-1302599754.cos.ap-guangzhou.myqcloud.com/halo/QQ%E6%88%AA%E5%9B%BE20240709131321.png)

- 出现 `QUIC is supported`及 `HTTP/3 is supported`即为成功
  
## Github Actions

- 推荐使用`Actions`自动构建更新会非常方便

```yml
name: Build Nginx Based on LDD Version

on:
  workflow_dispatch:
    inputs:
      ldd_version:
        description: "Specify the ldd version (e.g., 2.12, 2.17, 2.28, 2.34)"
        required: true
        default: "2.28"
      nginx_version:
        description: "Specify the nginx version"
        required: true
        default: "1.27.1"
      prefix:
        required: true

jobs:
  build-nginx:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set system version based on ldd version
      id: set-system
      run: |
        case "${{ github.event.inputs.ldd_version }}" in
          "2.12")
            echo "SYSTEM_VERSION=6" >> $GITHUB_ENV
            ;;
          "2.17")
            echo "SYSTEM_VERSION=7" >> $GITHUB_ENV
            ;;
          "2.28")
            echo "SYSTEM_VERSION=8" >> $GITHUB_ENV
            ;;
          "2.34")
            echo "SYSTEM_VERSION=9" >> $GITHUB_ENV
            ;;
          *)
            echo "Unsupported ldd version: ${{ github.event.inputs.ldd_version }}"
            exit 1
            ;;
        esac

    - name: Pull Docker image for chosen system
      run: |
        docker pull almalinux:${{ env.SYSTEM_VERSION }}

    - name: Run Docker container and build Nginx
      run: |
        docker run --rm -v ${{ github.workspace }}:/opt/nginx almalinux:${{ env.SYSTEM_VERSION }} /bin/bash -c "
          dnf -y update &&
          dnf -y groupinstall 'Development Tools' &&
          dnf -y install nano wget mercurial psmisc cmake go automake gcc gcc-c++ kernel-devel git zlib zlib-devel openssl openssl-devel pcre pcre-devel perl-IPC-Cmd make tar autoconf brotli-devel &&
          dnf clean all &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/quictls/openssl.git openssl &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/jemalloc/jemalloc.git jemalloc &&
          cd jemalloc && ./autogen.sh && make -j$(nproc) && make install && make clean &&
          ln -s /usr/local/lib/libjemalloc.so.2 /usr/lib/libjemalloc.so.2 &&
          ln -s /usr/local/lib/libjemalloc.so.2 /usr/lib64/libjemalloc.so.2 &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/google/ngx_brotli.git ngx_brotli &&
          cd ngx_brotli && git submodule update --init &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/facebook/zstd.git zstd &&
          cd zstd && make -j$(nproc) && make install && make clean &&
          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/tokers/zstd-nginx-module.git ngx_zstd &&
          
          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/PCRE2Project/pcre2.git pcre2 &&
          cd pcre2 && ./autogen.sh && ./configure && make -j$(nproc) && make install && make clean &&

          cd /opt/nginx &&
          wget https://nginx.org/download/nginx-${{ github.event.inputs.nginx_version }}.tar.gz &&
          tar -zxvf nginx-${{ github.event.inputs.nginx_version }}.tar.gz && cd nginx-${{ github.event.inputs.nginx_version }} &&
          ./configure --prefix=${{ github.event.inputs.prefix }} --with-threads --with-file-aio --with-http_v2_module --with-http_v3_module --with-http_ssl_module \
                      --with-http_sub_module --with-http_slice_module --with-http_realip_module --with-http_degradation_module \
                      --with-http_stub_status_module --with-pcre-jit --with-pcre=../pcre2 --with-stream --with-stream_ssl_module \
                      --with-stream_ssl_preread_module --with-openssl=../openssl --add-module=../ngx_zstd --add-module=../ngx_brotli \
                      --with-ld-opt='-ljemalloc -Wl,-z,relro,-z,now -flto' \
                      --with-openssl-opt='no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 enable-tls1_3 enable-quic' \
                      --with-cc-opt='-O3 -march=haswell -mtune=haswell -mavx2 -funroll-loops -fprefetch-loop-arrays \
                                     -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -pipe -flto' &&
          make -j$(nproc) && objs/./nginx -V &> /opt/nginx/nginx_build_info.txt && mv objs/nginx /opt/nginx/
        "

    - name: Upload Nginx binary and build information to repository
      uses: actions/upload-artifact@v3
      with:
        name: nginx_artifacts
        path: |
          ${{ github.workspace }}/nginx
          ${{ github.workspace }}/nginx_build_info.txt
```
